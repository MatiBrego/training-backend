// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// The generator block runs every time you run `prisma generate`.
// The prisma-client-js is the default generator that builds ts types based on the db models.
// You can find more about generators here: https://www.prisma.io/docs/concepts/components/prisma-schema/generators
generator client {
  provider = "prisma-client-js"
}

// The datasource block specifies the url to your DBMS.
// You only need to set the DATABASE_URL in your environment file.
// You can find more about datasources here: https://www.prisma.io/docs/concepts/components/prisma-schema/data-sources
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  username String  @unique // Unique constraint
  name     String? @db.VarChar(35) // Limit display name to 35 characters
  email    String  @unique // Unique constraint
  password String

  isPrivate Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  posts     Post[]
  follows   Follow[] @relation(name: "follows")
  followers Follow[] @relation(name: "followers")
  likes     Lks[]   @relation(name: "likes")
  retweets  Retweet[] @relation(name: "retweets")

  chatUsers ChatUser[] @relation(name: "chatUsers")

}

model Follow {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  followerId String @db.Uuid()
  followedId String @db.Uuid()

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  follower User @relation(name: "follows", fields: [followerId], references: [id], onDelete: Cascade) // One to many
  followed User @relation(name: "followers", fields: [followedId], references: [id], onDelete: Cascade) // One to many
}

model Post {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  authorId String   @db.Uuid // Foreign Key
  content  String   @db.VarChar(240) // Limit the content to 240 characters
  images   String[]
  parentPostId String? @db.Uuid

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade) // One to many

  likes Lks[] @relation(name: "likes")
  retweets Retweet[] @relation(name: "retweets")

  comments Post[] @relation(name: "comments")
  parentPost Post? @relation(name: "comments", fields: [parentPostId], references: [id], onDelete: Cascade) //One to many

}

model Lks{
    id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

    likerId String @db.Uuid
    postId  String @db.Uuid

    liker User @relation(name: "likes", fields: [likerId], references: [id], onDelete: Cascade) //One to many
    post Post @relation(name: "likes", fields: [postId], references: [id], onDelete: Cascade) //One to many
}

model Retweet{
    id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

    retweeterId String @db.Uuid
    postId  String @db.Uuid

    retweeter User @relation(name: "retweets", fields: [retweeterId], references: [id], onDelete: Cascade) //One to many
    post Post @relation(name: "retweets", fields: [postId], references: [id], onDelete: Cascade) //One to many
}

model ChatRoom{
    id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

    name String?

    users ChatUser[] @relation(name: "users")
    messages ChatMessage[] @relation(name: "messages")
}

model ChatUser{
    id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

    userId String @db.Uuid
    chatRoomId String @db.Uuid

    user User @relation(name: "chatUsers", fields: [userId], references: [id], onDelete: Cascade)
    chatRoom ChatRoom @relation(name: "users", fields: [chatRoomId], references: [id], onDelete: Cascade)
    messages ChatMessage[] @relation(name: "messages")
}

model ChatMessage{
    id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

    message String
    userId String @db.Uuid
    chatRoomId String @db.Uuid

    user ChatUser @relation(name: "messages", fields: [userId], references: [id], onDelete: Cascade)
    chatRoom ChatRoom @relation(name: "messages", fields: [chatRoomId], references: [id], onDelete: Cascade)
}